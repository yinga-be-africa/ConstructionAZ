if (!window.ubSnowplow || !window.ubSnowplow.mainInitialized) {
  (function () {
    // Load snowplow script (this is provided by snowplow)
    (function (p, l, o, w, i, n, g) {
      if (!p[i]) {
        p.UnbounceSnowplowNamespace = p.UnbounceSnowplowNamespace || [];
        p.UnbounceSnowplowNamespace.push(i);
        p[i] = function () {
          (p[i].q = p[i].q || []).push(arguments);
        };
        p[i].q = p[i].q || [];
        n = l.createElement(o);
        g = l.getElementsByTagName(o)[0];
        n.async = 1;
        n.src = w;
        g.parentNode.insertBefore(n, g);
      }
    })(
      window,
      document,
      "script",
      "https://d34qb8suadcc4g.cloudfront.net/sp-2.14.0.js",
      "ubSnowplow"
    );

    // Checks whether the current page is a "main" page
    var isMainPage = (function () {
      var usedAs = window.ub.page.usedAs;
      return function () {
        return usedAs === "main";
      };
    })();

    // Gets `ub` object from the "main" page
    var getMainPageUb = function () {
      try {
        return isMainPage() ? window.ub : window.parent.ub;
      } catch (e) {
        return undefined;
      }
    };

    // Function that performs all the main tracker configuration.
    var configureTracker = function () {
      var mainPageUb = getMainPageUb();

      if (!mainPageUb || !mainPageUb.page) {
        return;
      }

      // Page object used for the rest of this closure.
      var page = {
        id: mainPageUb.page.id,
        currentId: window.ub.page.id,
        variantId: mainPageUb.page.variantId,
        routingStrategy: mainPageUb.routingStrategy
      };

      var isConversionLink = function (element) {
        var href = (element && element.href) || "";
        return href.indexOf("/clkg/") >= 0;
      };

      // Creates custom contexts for events
      var pageContext = function (type, eventMetadata) {
        return {
          schema: "js_tracker_context_v1.1.json",
          data: {
            pageId: page.id,
            variantId: page.variantId,
            eventType: type || "",
            eventMetadata: eventMetadata || [],
            routingStrategy: page.routingStrategy
          }
        };
      };

      // Don't do anything else if the page id could not be read or if a
      // subpage is being accessed directly
      if (!page.id || (!isMainPage() && page.id === page.currentId)) {
        return;
      }

      // Set up snowplow tracker
      window.ubSnowplow(
        "newTracker",
        "sp-ub",
        "events.ub-analytics.com",
        {
          appId: "landing_page",
          platform: "web",
          eventMethod: "get",
          stateStorageStrategy: "localStorage"
        }
      );

      // Use visitor ID generated by PS2
      window.ubSnowplow("setUserId:sp-ub", mainPageUb.visitorId);

      // Only emit views on main pages
      if (isMainPage()) {
        window.ubSnowplow("trackPageView:sp-ub", null, [pageContext("visit")]);
      }

      // Track form submissions
      // We are using UB hooks as opposed to the `enableFormTracking` builtin
      // method so that we only emit events once we know the form has been
      // successfully submitted.
      window.ub.hooks.afterFormSubmit.push(function (event) {
        var eventMetadata = event.isConversionGoal ? ["conversion"] : [];
        var snowplowContext = {
          schema:
            "iglu:com.snowplowanalytics.snowplow/submit_form/jsonschema/1-0-0",
          // The `submit_form` schema requires the formId field to be present.
          // Even though we are not making any validations at this point, we are
          // setting this property to be compliant with the schema.
          // When testing the `enableFormTracking` the value gotten for
          // data was: {"formId":"FORM","formClasses":[],"elements":[]}
          data: {
            formId: "ub-form"
          }
        };

        // TODO: Revisit this.
        // We are using the snowplow object in the parent frame to handle form
        // submission events emitted from within an iframe. Without this,
        // HTTP requests were canceled by the browser as the iframe where the
        // form submission occurs is often removed immediately.
        var sp = isMainPage() ? window.ubSnowplow : window.parent.ubSnowplow;

        sp("trackSelfDescribingEvent:sp-ub", snowplowContext, [
          pageContext("form-submission", eventMetadata)
        ]);
      });

      // Track conversion link clicks
      window.ubSnowplow(
        "enableLinkClickTracking:sp-ub",
        {
          filter: function (event) {
            return isConversionLink(event);
          }
        },
        true,
        false,
        [pageContext("link-click", ["conversion"])]
      );

      // Track non-conversion link clicks
      window.ubSnowplow(
        "enableLinkClickTracking:sp-ub",
        {
          filter: function (event) {
            return !isConversionLink(event);
          }
        },
        true,
        false,
        [pageContext("link-click")]
      );

      window.ubSnowplow.mainInitialized = true;
    };

    configureTracker();
  })();
} else {
  console.log("Tracker already initialized.");
}
